<?php

use CRM_Emailfiling_Service_MailProcessor as MailProcessor;

/**
 * Class EmailFilingInboundProcessor.
 */
class CRM_Emailfiling_Hook_emailProcessor_InboundProcessor {

  /**
   * Inbound email processor.
   *
   * Attaches original email as .eml file to activity.
   *
   * @param string $type
   *   Type of mail processed: 'activity' OR 'mailing'.
   * @param array $params
   *   Params that were sent to the CiviCRM API function.
   * @param ezcMail $mail
   *   Mail object which is an ezcMail class.
   * @param array $result
   *   Result returned by the api call.
   * @param string $action
   *   (Optional) Requested action to be performed if the types was 'mailing'.
   *
   * @throws \CiviCRM_API3_Exception
   */
  public function run($type, &$params, $mail, &$result, $action) {
    if (!$this->shouldRun($type, $result)) {
      return;
    }

    // On one hand we can use $mail->generate() to generate eml and get rid of
    // some other actions here, but this approach has 2 major failures:
    // 1. Date in eml headers would represent current time, but not email time.
    // 2. Mail attachments will be empty... Because they have been moved by
    // civicrm on some previous step from their original location (/tmp)
    // to the custom civicrm folder. Then maybe we could use $params as this
    // variable contains attachments data as well, but again - file path is
    // outdated.
    // So to workaround this we will use mailToParams() to get all email
    // data as array (which can then be used by MailProcessor class). If mail
    // has some attachments - we would fetch them from activity and append to
    // data array for further processing.
    $activityId = $result['id'];
    $emlParams = $this->mailToParams($mail);
    if (!empty($emlParams['attachments'])) {
      $emlParams['attachments'] = $this->loadAttachments($activityId);
    }

    $processor = new MailProcessor($emlParams);
    $processor->attachEmlToActivity($activityId);
  }

  /**
   * Checks if hook should run.
   *
   * @param string $type
   *   Related entity type.
   * @param array $result
   *   Related entity data (from civicrm_api get request).
   *
   * @return bool
   *   True if hook should run, false otherwise.
   */
  private function shouldRun($type, array $result) {
    if ($type === 'activity' && !empty($result['id'])) {
      return TRUE;
    }

    return FALSE;
  }

  /**
   * Converts mail object to array.
   *
   * @param \ezcMail $mail
   *   Mail data object.
   *
   * @return array
   *   Mail data as array.
   */
  private function mailToParams(ezcMail $mail) {
    // Get headers.
    $emlParams = !empty($mail->headers) ? $mail->headers->getCaseSensitiveArray() : [];
    $emlParams['timestamp'] = $mail->timestamp;

    // Get content.
    $parts = $mail->fetchParts();
    foreach ($parts as $part) {
      if ($part instanceof ezcMailText) {
        if ($part->subType === 'plain') {
          $emlParams['text'] = $part->text;
        }
        else {
          $emlParams['html'] = $part->text;
        }
      }
      elseif ($part instanceof ezcMailFile) {
        // We will get just a file name of attachment to flag that it exists
        // and will load full details on the next step (see loadAttachments()).
        $emlParams['attachments'][] = $part->contentDisposition->fileName;
      }
    }

    return $emlParams;
  }

  /**
   * Loads activity attachments.
   *
   * @param int $activityId
   *   Activity id.
   *
   * @return array
   *   Attachments data suitable for MailProcessor class, each item is array
   *   like this: [fullpath => '...', mime_type => '...', cleanName => '...'].
   *
   * @throws \CiviCRM_API3_Exception
   *   An exception generated by civicrm_api3()
   */
  private function loadAttachments($activityId) {
    $attachments = [];
    $files = civicrm_api3('Attachment', 'get', [
      'entity_id' => $activityId,
      'entity_table' => 'civicrm_activity',
    ]);

    if (empty($files['values'])) {
      return $attachments;
    }

    foreach ($files['values'] as $key => $file) {
      [$path, $mimeType] = CRM_Core_BAO_File::path($file['id'], $activityId);
      $attachments[$key] = [
        'fullPath' => $path,
        'mime_type' => $file['mime_type'],
        'cleanName' => $file['name'],
      ];
    }

    return $attachments;
  }

}
